export const fetchEventTickets = async () => {
    try {
      const response = await fetch("http://192.168.56.1:3000/api/event_tickets/read");
  
      console.log("Response status:", response.status);
  
      if (!response.ok) {
        const errorDetails = await response.text(); // Get more error details
        console.error("Error details:", errorDetails);
        throw new Error(`Failed to fetch event_tickets: ${response.status}`);
      }
  
      const data = await response.json();
      console.log("Fetched data:", data);
  
      // Make sure to correctly access the data structure
      const eventTickets = data.map(event_tickets => ({
        ...event_tickets,
      }));
  
      console.log("Event Tickets:", eventTickets);
      return eventTickets;
    } catch (error) {
      console.error("Error fetching event tickets:", error);
      return [];
    }
  };
  
  model Events {
    idevent                 Int                 @id @default(autoincrement())
    name                    String              @db.VarChar(100)
    start_date              DateTime            @db.DateTime(0)
    end_date                DateTime?           @db.DateTime(0)
    description             String?             @db.VarChar(1024)
    number_of_ticket        Int
    photo                   String?             @db.VarChar(1024)
    contact_info            String              @db.VarChar(256)
    idevent_category        Int
    idevent_location        Int
    status                  Int                 @db.TinyInt
    is_seat_categorized     Boolean             // Nowe pole typu Boolean
    event_category          Event_categories    @relation(fields: [idevent_category], references: [idevent_category])
    event_location          Event_locations     @relation(fields: [idevent_location], references: [idevent_location])
    event_tickets           Event_tickets[]
    comments                Comments[]
    favourite_events        Favourite_events[]
}

model Event_tickets {
    idevent_ticket          Int                 @id @default(autoincrement())
    name                    String?             @db.VarChar(100)
    price                   Float               @db.Float
    start_date              DateTime            @db.DateTime(0)
    end_date                DateTime            @db.DateTime(0)
    idevent                 Int
    event                   Events              @relation(fields: [idevent], references: [idevent])
    order_tickets           Order_tickets[]
}

const HomeScreen = () => {
  const navigation = useNavigation();
  const opacityAnim = useRef(new Animated.Value(0)).current;
  const { selectedCity } = useContext(Place);
  const [modalVisible, setModalVisible] = useState(false);
  const [events, setEvents] = useState([]); // State to store events
  const [categories, setCategories] = useState([]); // State to store categories
  const [selectedCategory, setSelectedCategory] = useState(); // State for filter
  const [searchQuery, setSearchQuery] = useState(""); // State for search query
  const [locations, setLocations] = useState([]);
  useEffect(() => {
    const loadData = async () => {
      try {
        // Fetching data from APIs
        const fetchedEvents = await fetchEvents();
        const fetchedCategories = await fetchCategories();
        const fetchedLocations = await fetchLocations(); 
  
        // Mapping foreign keys to include category names and location details
        const eventsWithCategoryAndLocationNames = fetchedEvents.map((event) => {
          const category = fetchedCategories.find(
            (cat) => cat.idevent_category === event.idevent_category
          );
  
          // Find location based on event's location ID
          const location = fetchedLocations.find(
            (loc) => loc.id === event.idevent_location // Ensure event has event_location_id
          );
  
          return {
            ...event,
            categoryType: category ? category.category_type : "Unknown",
            location_name: location ? location.name : "Unknown Location",
            city_name: location ? location.city : "Unknown City",
            country_name: location ? location.country : "Unknown Country"
          };
        });
  
        // Updating state with the mapped data
        setEvents(eventsWithCategoryAndLocationNames);
        setCategories(fetchedCategories);
        setLocations(fetchedLocations); // Optional: if you want to store locations too
  
      } catch (error) {
        console.error("Error loading data:", error); // Handle any errors
      }
    };
  
    loadData();
  }, []); // Fetch data on component mount
   // Fetch data on component mount

  // Filtering function based on selected category
  const applyFilter = (filter) => {
    if (!filter || filter === "All") {
      return events; // Return all events if filter is "All" or not set
    }

    // Create a mapping of category_type to idevent_category
    const categoryMapping = categories.reduce((acc, category) => {
      acc[category.category_type] = category.idevent_category; // Map category_type to idevent_category
      return acc;
    }, {});

    const categoryId = categoryMapping[filter]; // Get the category ID based on the selected filter

    // Filter events based on the category ID
    return events.filter(event => event.idevent_category === categoryId); // Use idevent_category for filtering
  };

  // Function to filter events based on search query
  const filterEvents = (events) => {
    if (!searchQuery) return events; // If no search query, return all events
    return events.filter(event => {
      const title = event.title || ""; // Default to empty string if title is undefined
      const description = event.description || ""; // Default to empty string if description is undefined
      return (
        title.toLowerCase().includes(searchQuery.toLowerCase()) || 
        description.toLowerCase().includes(searchQuery.toLowerCase())
      );
    });
  };

  // Combined filter logic
  const filteredEvents = filterEvents(applyFilter(selectedCategory)); // Combine filters

  useFocusEffect(
    React.useCallback(() => {
      opacityAnim.setValue(0);
      Animated.timing(opacityAnim, {
        toValue: 1,
        duration: 2000,
        useNativeDriver: true,
      }).start();
    }, [opacityAnim])
  );

  useLayoutEffect(() => {
    navigation.setOptions({
      headerLeft: () => <Text>Hello Miłosz</Text>,
      headerStyle: styles.headerStyle, // Use imported styles
      headerRight: () => (
        <Pressable
          style={{ flexDirection: "row", alignItems: "center", gap: 4 }}
        >
          <Ionicons name="notifications-outline" size={24} color="black" />
          <EvilIcons
            onPress={() => navigation.navigate("Places")}
            name="location"
            size={24}
            color="black"
          />
          <Pressable onPress={() => navigation.navigate("Places")}>
            <Animated.Text style={{ opacity: opacityAnim }}>
              <Text>{selectedCity ? selectedCity.name : "Lublin"}</Text>
            </Animated.Text>
          </Pressable>
        </Pressable>
      ),
    });
  }, [navigation, opacityAnim, selectedCity]);

  return (
    
    <>
      <SearchBar searchQuery={searchQuery} setSearchQuery={setSearchQuery} />
      <View style={styles.container}>
        <FlatList
          ListHeaderComponent={Header}
          data={filteredEvents} // Use the combined filtered events
          renderItem={({ item, index }) => (
            <EventCard
              item={{
                ...item,
                location_name: item.location_name, // Użyj nowego pola
                city_name: item.city_name, // Użyj nowego pola
                country_name: item.country_name, // Użyj nowego pola
                photo: item.photo,
                description: item.description,
                
                isSeatCategorized: item.is_seat_categorized,
                categoryType: item.categoryType,
              }}
              key={index}
            />
          )}
          contentContainerStyle={{ paddingBottom: 100 }}
        />


        const EventCard = ({ item }) => {
  const formattedStartDate = formatDate(item.start_date);
  const formattedEndDate = formatDate(item.end_date);
  const locationName = item.location_name; // Użycie nazwy lokalizacji
  const cityName = item.city_name; // Użycie nazwy miasta
  const navigation = useNavigation();

  return (
    <SafeAreaView>
      <Pressable style={ec_s.card}>
        <Image style={ec_s.img_left} source={{ uri: item.photo }} />
        <View style={ec_s.info_right}>
          <Text style={ec_s.eventName}>{item.name}</Text>
          <Text style={ec_s.eventDates}>
            {formattedStartDate === formattedEndDate
              ? formattedStartDate
              : `${formattedStartDate} - ${formattedEndDate}`}
          </Text>
          <Text style={ec_s.eventLocation}>
            {locationName}, {cityName}{" "}
            {/* Wyświetlenie nazwy lokalizacji i miasta */}
          </Text>
          <Pressable
            style={ec_s.bookButton}
            onPress={() =>
              navigation.navigate("Event", {
                title: item.name,
                photo: item.photo, // Przekazujemy zdjęcie
                description: item.description, // Przekazujemy opis
                location: locationName,
                city: cityName,
                startDate: item.start_date,
                endDate: item.end_date,
                
                categoryType: item.categoryType,
                isSeatCategorized: item.is_seat_categorized, 

              })
            }
          >
            <Text style={ec_s.bookButtonText}>Book</Text>
          </Pressable>
        </View>
      </Pressable>
    </SafeAreaView>
  );
};

export default EventCard;


const EventScreen = () => {
  const navigation = useNavigation();
  const route = useRoute();

  const {
    title,
    photo,
    description,
    locationName,
    cityName,
    startDate,
    endDate,
    isSeatCategorized,
    
    categoryType,
  } = route.params;

  // Format date and time
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return `${String(date.getDate()).padStart(2, "0")}-${String(
      date.getMonth() + 1
    ).padStart(2, "0")}-${date.getFullYear()}`;
  };
  const formatTime = (dateString) =>
    new Date(dateString).toLocaleTimeString([], {
      hour: "2-digit",
      minute: "2-digit",
    });
  const calculateDuration = (start, end) =>
    Math.ceil((new Date(end) - new Date(start)) / (1000 * 3600 * 24));

  useLayoutEffect(() => {
    navigation.setOptions({
      headerTitle: title,
      headerStyle: { backgroundColor: "#f5f5f5", shadowOpacity: 0.3 },
    });
  }, [navigation, title]);

  const handleBooking = () => {
    navigation.navigate(
      isSeatCategorized ? "SeatCategory" : "Confirmation",
      route.params
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView>
        <View style={styles.detailsContainer}>
          <Image style={styles.image} source={{ uri: photo }} />

          <View style={styles.separator} />

          <Text style={styles.infoText}>
            <Text style={styles.label}>Data:</Text> {formatDate(startDate)} -{" "}
            {formatDate(endDate)}
          </Text>
          <Text style={styles.infoText}>
            <Text style={styles.label}>Godzina:</Text> {formatTime(startDate)} -{" "}
            {formatTime(endDate)}
          </Text>
          <Text style={styles.infoText}>
            <Text style={styles.label}>Kategoria:</Text>{" "}
            {categoryType || "Nieznana kategoria"}
          </Text>
          <Text style={styles.infoText}>
            <Text style={styles.label}>Czas trwania:</Text>{" "}
            {calculateDuration(startDate, endDate)} dni
          </Text>

          <View style={styles.separator} />

          <Text style={styles.descriptionText}>{description}</Text>

          <View style={styles.separator} />

          <Text style={styles.additionalInfoText}>
            <Text style={styles.label}>Dodatkowe informacje:</Text>
          </Text>
          <Text style={styles.priceText}>
            Podział miejsc: {isSeatCategorized ? "Tak" : "Nie"}
          </Text>
          
          

          {/* {isSeatCategorized ? (
            <>
              <Text style={styles.priceText}>
                Cena za pierwszą kategorię: {price * 3.0} zł
              </Text>
              <Text style={styles.priceText}>
                Cena za drugą kategorię: {price * 2.0} zł
              </Text>
              <Text style={styles.priceText}>
                Cena za trzecią kategorię: {price} zł
              </Text>
            </>
          ) : (
            <Text style={styles.priceText}>Cena za bilet: {price} zł</Text>
          )} */}
        </View>

        {/* Booking Button */}
        <Pressable style={styles.bookButton} onPress={handleBooking}>
          <Text style={styles.bookButtonText}>NEXT</Text>
        </Pressable>
      </ScrollView>
    </SafeAreaView>
  );
};

export default EventScreen;